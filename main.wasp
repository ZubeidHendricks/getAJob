app GetAJob {
  wasp: {
    version: "^0.11.4"
  },
  title: "GetAJob",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id            Int            @id @default(autoincrement())
    username      String         @unique
    password      String
    resume        String
    applications  Application[]
    courses       Course[]
    notifications Notification[]
psl=}

entity Job {=psl
    id           Int           @id @default(autoincrement())
    description  String
    requirements String
    benefits     String
    isOpen       Boolean       @default(true)
    applications Application[]
psl=}

entity Application {=psl
    id     Int    @id @default(autoincrement())
    status String
    job    Job    @relation(fields: [jobId], references: [id])
    jobId  Int
    user   User   @relation(fields: [userId], references: [id])
    userId Int
psl=}

entity Course {=psl
    id      Int    @id @default(autoincrement())
    title   String
    content String
    user    User   @relation(fields: [userId], references: [id])
    userId  Int
psl=}

entity Notification {=psl
    id      Int    @id @default(autoincrement())
    content String
    user    User   @relation(fields: [userId], references: [id])
    userId  Int
psl=}

action createJob {
  fn: import { createJob } from "@server/actions.js",
  entities: [Job],
}

action applyForJob {
  fn: import { applyForJob } from "@server/actions.js",
  entities: [User, Job, Application],
}

action createCourse {
  fn: import { createCourse } from "@server/actions.js",
  entities: [Course],
}

action enrollInCourse {
  fn: import { enrollInCourse } from "@server/actions.js",
  entities: [User, Course],
}

action createNotification {
  fn: import { createNotification } from "@server/actions.js",
  entities: [Notification],
}

query getUser {
  fn: import { getUser } from "@server/queries.js",
  entities: [User, Application, Course, Notification],
}

query getJob {
  fn: import { getJob } from "@server/queries.js",
  entities: [Job, Application],
}

query getJobs {
  fn: import { getJobs } from "@server/queries.js",
  entities: [Job],
}

query getApplication {
  fn: import { getApplication } from "@server/queries.js",
  entities: [Application],
}

query getCourse {
  fn: import { getCourse } from "@server/queries.js",
  entities: [Course, User],
}

query getNotification {
  fn: import { getNotification } from "@server/queries.js",
  entities: [Notification],
}

route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import { Home } from "@client/pages/Home.jsx",
}

route ProfileRoute { path: "/profile", to: ProfilePage }
page ProfilePage {
  component: import { Profile } from "@client/pages/Profile.jsx",
  authRequired: true,
}

route JobRoute { path: "/jobs/:jobId", to: JobPage }
page JobPage {
  component: import { Job } from "@client/pages/Job.jsx",
  authRequired: false,
}

route CourseRoute { path: "/courses/:courseId", to: CoursePage }
page CoursePage {
  component: import { Course } from "@client/pages/Course.jsx",
  authRequired: true,
}

route ApplicationRoute { path: "/applications/:applicationId", to: ApplicationPage }
page ApplicationPage {
  component: import { ApplicationPage } from "@client/pages/Application.jsx",
  authRequired: true,
}
